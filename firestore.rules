rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection:
    // - Anyone can create their own user profile (signup).
    // - Users can only read/update their own profile.
    // - Logged-in users can read profiles of doctors to display names.
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(userId)).data.role == 'doctor');
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if false; // Disallow deleting user profiles directly
    }

    // Patients collection:
    // - Doctors can create patient records for their clinic.
    // - Doctors can read/update/delete patient records associated with their doctorId.
    // - Patients can read their own records (where their authUid matches).
    match /patients/{patientId} {
      allow create: if request.auth != null && request.resource.data.doctorId == request.auth.uid;
      allow read: if request.auth != null && (
        resource.data.doctorId == request.auth.uid ||
        resource.data.authUid == request.auth.uid
      );
      allow update: if request.auth != null && resource.data.doctorId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.doctorId == request.auth.uid;
    }

    // Medicines collection:
    // - Doctors can manage medicines for their own clinic.
    match /medicines/{medicineId} {
        allow read, write: if request.auth != null && request.resource.data.doctorId == request.auth.uid;
    }

    // Appointments collection:
    // - Doctors can create appointments for their patients.
    // - Doctors can read/update/delete appointments they created.
    // - Patients can read appointments linked to their patient record.
    // To check if a patient can read an appointment, we need to check the patient document.
    match /appointments/{appointmentId} {
      allow create: if request.auth != null && request.resource.data.doctorId == request.auth.uid;
      allow read: if request.auth != null && (
        resource.data.doctorId == request.auth.uid ||
        get(/databases/$(database)/documents/patients/$(resource.data.patientId)).data.authUid == request.auth.uid
      );
      allow update, delete: if request.auth != null && resource.data.doctorId == request.auth.uid;
    }
  }
}

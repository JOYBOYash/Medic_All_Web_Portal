
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can only read/update their own profile.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if false;
    }
    
    // Medicines can be read by any authenticated user, but only managed by the doctor who created them.
    match /medicines/{medicineId} {
      allow read: if request.auth != null;
      allow create, update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor'
                          && request.resource.data.doctorId == request.auth.uid;
      allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor'
                     && resource.data.doctorId == request.auth.uid;
    }

    // Doctors manage patient records; Patients can read their own records.
    match /patients/{patientId} {
      function isDoctorOfPatient() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor'
               && resource.data.doctorId == request.auth.uid;
      }
      
      function isPatientSelf() {
        return resource.data.authUid == request.auth.uid;
      }

      allow read: if isDoctorOfPatient() || isPatientSelf();
      
      allow create, update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor'
                                     && request.auth.uid == request.resource.data.doctorId;
    }

    // Doctors manage appointments; Patients can read their own.
    match /appointments/{appointmentId} {
      function isDoctorOfAppointment() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor'
               && resource.data.doctorId == request.auth.uid;
      }

      function isPatientOfAppointment() {
        // A patient can see an appointment if the appointment's patientId links to a patient record
        // that has the patient's authUid. This is the secure way to check.
        let patientRecord = get(/databases/$(database)/documents/patients/$(resource.data.patientId));
        return patientRecord.data.authUid == request.auth.uid;
      }

      allow read: if isDoctorOfAppointment() || isPatientOfAppointment();

      allow create, update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor'
                                     && request.auth.uid == request.resource.data.doctorId;
    }
  }
}

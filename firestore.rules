
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can read anyone's public profile, but only write to their own.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && request.auth.uid == userId;
    }
    
    // Doctors manage their patient records. Patients can read their own records.
    match /patients/{patientId} {
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor' && request.auth.uid == request.resource.data.doctorId;
      
      allow read: if request.auth != null && 
                   ((get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor' && resource.data.doctorId == request.auth.uid) ||
                   (resource.data.authUid != null && resource.data.authUid == request.auth.uid));

      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor' && resource.data.doctorId == request.auth.uid;
      
      // A doctor can delete a patient record from their clinic.
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor' && resource.data.doctorId == request.auth.uid;
    }

    // Doctors manage their own medicine inventory.
    match /medicines/{medicineId} {
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor' && (resource.data.doctorId == request.auth.uid || request.resource.data.doctorId == request.auth.uid);
    }
    
    // Doctors manage appointments. Patients can read their own appointments.
    match /appointments/{appointmentId} {
      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor' && resource.data.doctorId == request.auth.uid;
      
      allow read: if request.auth != null && 
                  ((get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor' && resource.data.doctorId == request.auth.uid) ||
                   (get(/databases/$(database)/documents/patients/$(resource.data.patientId)).data.authUid == request.auth.uid));
    }

    // Chat Rooms and Messages. Only participants can interact with their chat.
    match /chatRooms/{roomId} {
      // Create: Anyone in the room can create it (first message)
      allow create: if request.auth.uid in request.resource.data.participants;

      // Read, Update: Only participants can read/update the room (e.g. for lastMessage, unreadCounts)
      allow read, update: if request.auth.uid in resource.data.participants;
      
      // Delete: Only a doctor participant can delete the room.
      allow delete: if request.auth != null && 
                     request.auth.uid in resource.data.participants &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor';

      match /messages/{messageId} {
        // Read, Create: Only participants can read/create messages
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.participants;
        
        // No updates to messages allowed
        allow update: if false;

        // Delete: Only a doctor participant can delete messages (as part of room deletion)
        allow delete: if request.auth != null &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor' &&
                       request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.participants;
      }
    }
  }
}

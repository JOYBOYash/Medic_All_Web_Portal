
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isDoctor() {
      // Check the user's role document. This is secure but costs 1 read per check.
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor';
    }

    // USERS Collection
    // Any signed-in user can read profiles (for names/avatars in chat/appointments).
    // Users can only write to their own profile.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && request.auth.uid == userId;
    }

    // PATIENTS Collection
    // Doctors manage their patients. Patients read their own linked records.
    match /patients/{patientId} {
      allow read: if isSignedIn() && (request.auth.uid == resource.data.doctorId || request.auth.uid == resource.data.authUid);
      allow create: if isDoctor() && request.resource.data.doctorId == request.auth.uid;
      allow update, delete: if isDoctor() && resource.data.doctorId == request.auth.uid;
    }

    // MEDICINES Collection
    // Only the doctor who created a medicine can manage it.
    match /medicines/{medicineId} {
      allow read, update, delete: if isDoctor() && resource.data.doctorId == request.auth.uid;
      allow create: if isDoctor() && request.resource.data.doctorId == request.auth.uid;
    }
    
    // APPOINTMENTS Collection
    // Doctors manage appointments. Patients can read their own.
    match /appointments/{appointmentId} {
      allow read: if isSignedIn() && (request.auth.uid == resource.data.doctorId || get(/databases/$(database)/documents/patients/$(resource.data.patientId)).data.authUid == request.auth.uid);
      allow create, update, delete: if isDoctor() && (resource.data.doctorId == request.auth.uid || request.resource.data.doctorId == request.auth.uid);
    }

    // CHATROOMS Collection
    // Chat room ID is a composite of two sorted UIDs: '{uid1}_{uid2}'
    match /chatRooms/{roomId} {
      // To read/update a room, user must be a participant.
      allow read, update: if isSignedIn() && request.auth.uid in resource.data.participants;
      // To create a room, user must be in the new participants list, and participants must match the ID.
      allow create: if isSignedIn() && 
                     request.auth.uid in request.resource.data.participants &&
                     request.resource.data.participants.size() == 2 &&
                     roomId == request.resource.data.participants[0] + '_' + request.resource.data.participants[1];
      allow delete: if false; // Do not allow deleting chat rooms for now.

      // MESSAGES SUBCOLLECTION
      match /messages/{messageId} {
        // To read/create messages, user's UID must be part of the parent room's ID.
        // This avoids a 'get' call which fails if the parent doc doesn't exist yet.
        allow read, create: if isSignedIn() && request.auth.uid in roomId.split('_');
        
        // Don't allow message edits/deletes.
        allow update, delete: if false;
      }
    }
  }
}

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection
    match /users/{userId} {
      // Anyone authenticated can read a user's public profile info.
      allow read: if request.auth != null;
      // Only the authenticated user can create or update their own profile.
      allow create, update: if request.auth != null && request.auth.uid == userId;
    }
    
    // Patients collection
    match /patients/{patientId} {
      // CREATE: A doctor can create a patient record for their clinic.
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor' && request.auth.uid == request.resource.data.doctorId;

      // READ: A doctor can read their own patient records. A patient can read their own linked records.
      allow read: if request.auth != null && 
                   (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor' && resource.data.doctorId == request.auth.uid) ||
                   (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'patient' && resource.data.authUid == request.auth.uid);

      // UPDATE: A doctor can update a patient record for their clinic.
      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor' && resource.data.doctorId == request.auth.uid;

      // DELETE: A doctor can delete a patient record from their clinic.
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor' && resource.data.doctorId == request.auth.uid;
    }

    // Medicines collection
    match /medicines/{medicineId} {
      // Only doctors can manage medicines associated with their ID
      allow read, write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor' &&
        (request.resource.data.doctorId == request.auth.uid || resource.data.doctorId == request.auth.uid);
    }
    
    // Appointments
    match /appointments/{appointmentId} {
      // CREATE/UPDATE: Doctor can manage appointments for their patient.
      allow create, update: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor' && 
        request.auth.uid == request.resource.data.doctorId;
      
      // READ: Doctor can read their appointments. Patient can read their own appointments.
      allow read: if request.auth != null && (
          (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor' && resource.data.doctorId == request.auth.uid) ||
          (
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'patient' &&
              exists(/databases/$(database)/documents/patients/$(resource.data.patientId)) &&
              get(/databases/$(database)/documents/patients/$(resource.data.patientId)).data.authUid == request.auth.uid
          )
      );
      
      // DELETE: Doctor can delete their appointments. The rule must check `resource.data` not `request.resource.data`.
      allow delete: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor' && 
        request.auth.uid == resource.data.doctorId;
    }

    // Chat Rooms & Messages
    match /chatRooms/{roomId} {
        // Allow read/write on the room doc (e.g. updating last message) if user is a participant
        allow read, write: if request.auth != null && request.auth.uid in roomId.split('_');

        match /messages/{messageId} {
            // Allow read/write on messages if user is a participant in the room
            allow read, write: if request.auth != null && request.auth.uid in roomId.split('_');
        }
    }
  }
}


rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection
    match /users/{userId} {
      // Anyone can read a user's public profile info (e.g. doctor's name for appointments)
      allow read: if true;
      // Only the authenticated user can create or update their own profile
      allow create, update: if request.auth != null && request.auth.uid == userId;
    }
    
    // Patients collection
    match /patients/{patientId} {
      // CREATE: A doctor can create a patient record for their clinic.
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor' && request.auth.uid == request.resource.data.doctorId;

      // READ: 
      // 1. A doctor can read a patient record if it belongs to their clinic.
      // 2. A patient can read their own records if their authUid matches.
      allow read: if request.auth != null && 
                   (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor' && resource.data.doctorId == request.auth.uid) ||
                   (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'patient' && resource.data.authUid == request.auth.uid);

      // UPDATE: A doctor can update a patient record for their clinic.
      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor' && resource.data.doctorId == request.auth.uid;

      // DELETE: A doctor can delete a patient record from their clinic.
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor' && resource.data.doctorId == request.auth.uid;
    }

    // Medicines collection
    match /medicines/{medicineId} {
      // Only doctors can manage medicines associated with their ID
      allow read, create, update, delete: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor' &&
        (request.resource.data.doctorId == request.auth.uid || resource.data.doctorId == request.auth.uid);
    }
    
    // Appointments
    match /appointments/{appointmentId} {
      // CREATE: Doctor can create appointment for their patient
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor' && request.resource.data.doctorId == request.auth.uid;
      
      // READ: 
      // 1. Doctor can read their appointments
      // 2. Patient can read their appointments if their authUid is on the linked patient record.
      allow read: if request.auth != null && (
          (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor' && resource.data.doctorId == request.auth.uid) ||
          (
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'patient' &&
              exists(/databases/$(database)/documents/patients/$(resource.data.patientId)) &&
              get(/databases/$(database)/documents/patients/$(resource.data.patientId)).data.authUid == request.auth.uid
          )
      );

      // UPDATE: Doctor can update their appointments
      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor' && resource.data.doctorId == request.auth.uid;

      // DELETE: Doctor can delete their appointments.
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor' && resource.data.doctorId == request.auth.uid;
    }

    // Chat Rooms & Messages
    match /chatRooms/{roomId} {
      // A user can read/write the chatRoom doc (for lastMessage, etc.) if they are a participant.
      allow read, write: if request.auth != null && request.auth.uid in resource.data.participants;

      // A user can create the room doc if they are listed in the participants array being created.
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participants;
      
      match /messages/{messageId} {
        // A user can read messages if their UID is part of the chat room's ID.
        // This avoids a 'get' call on a potentially non-existent document.
        allow read: if request.auth != null && request.auth.uid in roomId.split('_');

        // A user can create a message if they are a participant AND the sender.
        allow create: if request.auth != null &&
                      request.auth.uid in roomId.split('_') &&
                      request.resource.data.senderId == request.auth.uid;
                      
        // Disallow message editing or deletion to maintain chat history.
        allow update, delete: if false;
      }
    }
  }
}
